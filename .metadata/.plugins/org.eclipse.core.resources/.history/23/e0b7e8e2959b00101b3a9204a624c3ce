/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
void display7SEG1(int num)
{
	HAL_GPIO_WritePin(PIN1_A_GPIO_Port, PIN1_A_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(PIN1_B_GPIO_Port, PIN1_B_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(PIN1_C_GPIO_Port, PIN1_C_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(PIN1_D_GPIO_Port, PIN1_D_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(PIN1_E_GPIO_Port, PIN1_E_Pin, GPIO_PIN_SET);
    HAL_GPIO_WritePin(PIN1_F_GPIO_Port, PIN1_F_Pin, GPIO_PIN_SET);
    HAL_GPIO_WritePin(PIN1_G_GPIO_Port, PIN1_G_Pin, GPIO_PIN_SET);

    switch(num)
    {
        case 0:
            HAL_GPIO_WritePin(GPIOB, PIN1_A_Pin, GPIO_PIN_RESET); // a
            HAL_GPIO_WritePin(GPIOB, PIN1_B_Pin, GPIO_PIN_RESET); // b
            HAL_GPIO_WritePin(GPIOB, PIN1_C_Pin, GPIO_PIN_RESET); // c
            HAL_GPIO_WritePin(GPIOB, PIN1_D_Pin, GPIO_PIN_RESET); // d
            HAL_GPIO_WritePin(GPIOB, PIN1_E_Pin, GPIO_PIN_RESET); // e
            HAL_GPIO_WritePin(GPIOB, PIN1_F_Pin, GPIO_PIN_RESET); // f
            break;
        case 1:
            HAL_GPIO_WritePin(GPIOB, PIN1_B_Pin, GPIO_PIN_RESET); // b
            HAL_GPIO_WritePin(GPIOB, PIN1_C_Pin, GPIO_PIN_RESET); // c
            break;
        case 2:
            HAL_GPIO_WritePin(GPIOB, PIN1_A_Pin, GPIO_PIN_RESET); // a
            HAL_GPIO_WritePin(GPIOB, PIN1_B_Pin, GPIO_PIN_RESET); // b
            HAL_GPIO_WritePin(GPIOB, PIN1_D_Pin, GPIO_PIN_RESET); // d
            HAL_GPIO_WritePin(GPIOB, PIN1_E_Pin, GPIO_PIN_RESET); // e
            HAL_GPIO_WritePin(GPIOB, PIN1_G_Pin, GPIO_PIN_RESET); // g
            break;
        case 3:
            HAL_GPIO_WritePin(GPIOB, PIN1_A_Pin, GPIO_PIN_RESET); // a
            HAL_GPIO_WritePin(GPIOB, PIN1_B_Pin, GPIO_PIN_RESET); // b
            HAL_GPIO_WritePin(GPIOB, PIN1_C_Pin, GPIO_PIN_RESET); // c
            HAL_GPIO_WritePin(GPIOB, PIN1_D_Pin, GPIO_PIN_RESET); // d
            HAL_GPIO_WritePin(GPIOB, PIN1_G_Pin, GPIO_PIN_RESET); // g
            break;
        case 4:
            HAL_GPIO_WritePin(GPIOB, PIN1_B_Pin, GPIO_PIN_RESET); // b
            HAL_GPIO_WritePin(GPIOB, PIN1_C_Pin, GPIO_PIN_RESET); // c
            HAL_GPIO_WritePin(GPIOB, PIN1_F_Pin, GPIO_PIN_RESET); // f
            HAL_GPIO_WritePin(GPIOB, PIN1_G_Pin, GPIO_PIN_RESET); // g
            break;
        case 5:
            HAL_GPIO_WritePin(GPIOB, PIN1_A_Pin, GPIO_PIN_RESET); // a
            HAL_GPIO_WritePin(GPIOB, PIN1_C_Pin, GPIO_PIN_RESET); // c
            HAL_GPIO_WritePin(GPIOB, PIN1_D_Pin, GPIO_PIN_RESET); // d
            HAL_GPIO_WritePin(GPIOB, PIN1_F_Pin, GPIO_PIN_RESET); // f
            HAL_GPIO_WritePin(GPIOB, PIN1_G_Pin, GPIO_PIN_RESET); // g
            break;
        case 6:
            HAL_GPIO_WritePin(GPIOB, PIN1_A_Pin, GPIO_PIN_RESET); // a
            HAL_GPIO_WritePin(GPIOB, PIN1_C_Pin, GPIO_PIN_RESET); // c
            HAL_GPIO_WritePin(GPIOB, PIN1_D_Pin, GPIO_PIN_RESET); // d
            HAL_GPIO_WritePin(GPIOB, PIN1_E_Pin, GPIO_PIN_RESET); // e
            HAL_GPIO_WritePin(GPIOB, PIN1_F_Pin, GPIO_PIN_RESET); // f
            HAL_GPIO_WritePin(GPIOB, PIN1_G_Pin, GPIO_PIN_RESET); // g
            break;
        case 7:
            HAL_GPIO_WritePin(GPIOB, PIN1_A_Pin, GPIO_PIN_RESET); // a
            HAL_GPIO_WritePin(GPIOB, PIN1_B_Pin, GPIO_PIN_RESET); // b
            HAL_GPIO_WritePin(GPIOB, PIN1_C_Pin, GPIO_PIN_RESET); // c
            break;
        case 8:
            HAL_GPIO_WritePin(GPIOB, PIN1_A_Pin, GPIO_PIN_RESET); // a
            HAL_GPIO_WritePin(GPIOB, PIN1_B_Pin, GPIO_PIN_RESET); // b
            HAL_GPIO_WritePin(GPIOB, PIN1_C_Pin, GPIO_PIN_RESET); // c
            HAL_GPIO_WritePin(GPIOB, PIN1_D_Pin, GPIO_PIN_RESET); // d
            HAL_GPIO_WritePin(GPIOB, PIN1_E_Pin, GPIO_PIN_RESET); // e
            HAL_GPIO_WritePin(GPIOB, PIN1_F_Pin, GPIO_PIN_RESET); // f
            HAL_GPIO_WritePin(GPIOB, PIN1_G_Pin, GPIO_PIN_RESET); // g
            break;
        case 9:
            HAL_GPIO_WritePin(GPIOB, PIN1_A_Pin, GPIO_PIN_RESET); // a
            HAL_GPIO_WritePin(GPIOB, PIN1_B_Pin, GPIO_PIN_RESET); // b
            HAL_GPIO_WritePin(GPIOB, PIN1_C_Pin, GPIO_PIN_RESET); // c
            HAL_GPIO_WritePin(GPIOB, PIN1_D_Pin, GPIO_PIN_RESET); // d
            HAL_GPIO_WritePin(GPIOB, PIN1_F_Pin, GPIO_PIN_RESET); // f
            HAL_GPIO_WritePin(GPIOB, PIN1_G_Pin, GPIO_PIN_RESET); // g
            break;
        default:
            // DEFAULT
            HAL_GPIO_WritePin(GPIOB, PIN1_A_Pin, GPIO_PIN_RESET); // a
            HAL_GPIO_WritePin(GPIOB, PIN1_B_Pin, GPIO_PIN_RESET); // b
            HAL_GPIO_WritePin(GPIOB, PIN1_C_Pin, GPIO_PIN_RESET); // c
            HAL_GPIO_WritePin(GPIOB, PIN1_D_Pin, GPIO_PIN_RESET); // d
            HAL_GPIO_WritePin(GPIOB, PIN1_E_Pin, GPIO_PIN_RESET); // e
            HAL_GPIO_WritePin(GPIOB, PIN1_F_Pin, GPIO_PIN_RESET); // f
            break;
    }
}
void display7SEG2(int num)
{
	HAL_GPIO_WritePin(PIN2_A_GPIO_Port, PIN2_A_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(PIN2_B_GPIO_Port, PIN2_B_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(PIN2_C_GPIO_Port, PIN2_C_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(PIN2_D_GPIO_Port, PIN2_D_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(PIN2_E_GPIO_Port, PIN2_E_Pin, GPIO_PIN_SET);
    HAL_GPIO_WritePin(PIN2_F_GPIO_Port, PIN2_F_Pin, GPIO_PIN_SET);
    HAL_GPIO_WritePin(PIN2_G_GPIO_Port, PIN2_G_Pin, GPIO_PIN_SET);


    switch(num)
    {
        case 0:
            HAL_GPIO_WritePin(GPIOB, PIN2_A_Pin, GPIO_PIN_RESET); // a
            HAL_GPIO_WritePin(GPIOB, PIN2_B_Pin, GPIO_PIN_RESET); // b
            HAL_GPIO_WritePin(GPIOB, PIN2_C_Pin, GPIO_PIN_RESET); // c
            HAL_GPIO_WritePin(GPIOB, PIN2_D_Pin, GPIO_PIN_RESET); // d
            HAL_GPIO_WritePin(GPIOB, PIN2_E_Pin, GPIO_PIN_RESET); // e
            HAL_GPIO_WritePin(GPIOB, PIN2_F_Pin, GPIO_PIN_RESET); // f
            break;
        case 1:
            HAL_GPIO_WritePin(GPIOB, PIN2_B_Pin, GPIO_PIN_RESET); // b
            HAL_GPIO_WritePin(GPIOB, PIN2_C_Pin, GPIO_PIN_RESET); // c
            break;
        case 2:
            HAL_GPIO_WritePin(GPIOB, PIN2_A_Pin, GPIO_PIN_RESET); // a
            HAL_GPIO_WritePin(GPIOB, PIN2_B_Pin, GPIO_PIN_RESET); // b
            HAL_GPIO_WritePin(GPIOB, PIN2_D_Pin, GPIO_PIN_RESET); // d
            HAL_GPIO_WritePin(GPIOB, PIN2_E_Pin, GPIO_PIN_RESET); // e
            HAL_GPIO_WritePin(GPIOB, PIN2_G_Pin, GPIO_PIN_RESET); // g
            break;
        case 3:
            HAL_GPIO_WritePin(GPIOB, PIN2_A_Pin, GPIO_PIN_RESET); // a
            HAL_GPIO_WritePin(GPIOB, PIN2_B_Pin, GPIO_PIN_RESET); // b
            HAL_GPIO_WritePin(GPIOB, PIN2_C_Pin, GPIO_PIN_RESET); // c
            HAL_GPIO_WritePin(GPIOB, PIN2_D_Pin, GPIO_PIN_RESET); // d
            HAL_GPIO_WritePin(GPIOB, PIN2_G_Pin, GPIO_PIN_RESET); // g
            break;
        case 4:
            HAL_GPIO_WritePin(GPIOB, PIN2_B_Pin, GPIO_PIN_RESET); // b
            HAL_GPIO_WritePin(GPIOB, PIN2_C_Pin, GPIO_PIN_RESET); // c
            HAL_GPIO_WritePin(GPIOB, PIN2_F_Pin, GPIO_PIN_RESET); // f
            HAL_GPIO_WritePin(GPIOB, PIN2_G_Pin, GPIO_PIN_RESET); // g
            break;
        case 5:
            HAL_GPIO_WritePin(GPIOB, PIN2_A_Pin, GPIO_PIN_RESET); // a
            HAL_GPIO_WritePin(GPIOB, PIN2_C_Pin, GPIO_PIN_RESET); // c
            HAL_GPIO_WritePin(GPIOB, PIN2_D_Pin, GPIO_PIN_RESET); // d
            HAL_GPIO_WritePin(GPIOB, PIN2_F_Pin, GPIO_PIN_RESET); // f
            HAL_GPIO_WritePin(GPIOB, PIN2_G_Pin, GPIO_PIN_RESET); // g
            break;
        case 6:
            HAL_GPIO_WritePin(GPIOB, PIN2_A_Pin, GPIO_PIN_RESET); // a
            HAL_GPIO_WritePin(GPIOB, PIN2_C_Pin, GPIO_PIN_RESET); // c
            HAL_GPIO_WritePin(GPIOB, PIN2_D_Pin, GPIO_PIN_RESET); // d
            HAL_GPIO_WritePin(GPIOB, PIN2_E_Pin, GPIO_PIN_RESET); // e
            HAL_GPIO_WritePin(GPIOB, PIN2_F_Pin, GPIO_PIN_RESET); // f
            HAL_GPIO_WritePin(GPIOB, PIN2_G_Pin, GPIO_PIN_RESET); // g
            break;
        case 7:
            HAL_GPIO_WritePin(GPIOB, PIN2_A_Pin, GPIO_PIN_RESET); // a
            HAL_GPIO_WritePin(GPIOB, PIN2_B_Pin, GPIO_PIN_RESET); // b
            HAL_GPIO_WritePin(GPIOB, PIN2_C_Pin, GPIO_PIN_RESET); // c
            break;
        case 8:
            HAL_GPIO_WritePin(GPIOB, PIN2_A_Pin, GPIO_PIN_RESET); // a
            HAL_GPIO_WritePin(GPIOB, PIN2_B_Pin, GPIO_PIN_RESET); // b
            HAL_GPIO_WritePin(GPIOB, PIN2_C_Pin, GPIO_PIN_RESET); // c
            HAL_GPIO_WritePin(GPIOB, PIN2_D_Pin, GPIO_PIN_RESET); // d
            HAL_GPIO_WritePin(GPIOB, PIN2_E_Pin, GPIO_PIN_RESET); // e
            HAL_GPIO_WritePin(GPIOB, PIN2_F_Pin, GPIO_PIN_RESET); // f
            HAL_GPIO_WritePin(GPIOB, PIN2_G_Pin, GPIO_PIN_RESET); // g
            break;
        case 9:
            HAL_GPIO_WritePin(GPIOB, PIN2_A_Pin, GPIO_PIN_RESET); // a
            HAL_GPIO_WritePin(GPIOB, PIN2_B_Pin, GPIO_PIN_RESET); // b
            HAL_GPIO_WritePin(GPIOB, PIN2_C_Pin, GPIO_PIN_RESET); // c
            HAL_GPIO_WritePin(GPIOB, PIN2_D_Pin, GPIO_PIN_RESET); // d
            HAL_GPIO_WritePin(GPIOB, PIN2_F_Pin, GPIO_PIN_RESET); // f
            HAL_GPIO_WritePin(GPIOB, PIN2_G_Pin, GPIO_PIN_RESET); // g
            break;
        default:
            // DEFAULT
            HAL_GPIO_WritePin(GPIOB, PIN2_A_Pin, GPIO_PIN_RESET); // a
            HAL_GPIO_WritePin(GPIOB, PIN2_B_Pin, GPIO_PIN_RESET); // b
            HAL_GPIO_WritePin(GPIOB, PIN2_C_Pin, GPIO_PIN_RESET); // c
            HAL_GPIO_WritePin(GPIOB, PIN2_D_Pin, GPIO_PIN_RESET); // d
            HAL_GPIO_WritePin(GPIOB, PIN2_E_Pin, GPIO_PIN_RESET); // e
            HAL_GPIO_WritePin(GPIOB, PIN2_F_Pin, GPIO_PIN_RESET); // f
            break;
    }
}

int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int counter1 = 5;
  int counter2 = 3;
  int step = 0;
  while (1)
  {
	  int counter1 = 5;
	    int counter2 = 3;
	    int step = 0;
	    while (1)
	    {
	  	  if (counter1 > 0 && counter2 <= 0 && step == 0){
	  		  //RED - GREEN -> RED - YELLOW, MAIN ROAD 1
	  		  step = 1;
	  	 	  counter2 = 2;
	  	  }
	  	  if (counter1 <= 0 && counter2 <= 0 && step == 1){
	  		  //RED - YELLOW -> RED - GREEN, MAIN 1 -> 2
	  		  step = 2;
	  		  counter1 = 5;
	  		  counter2 = 3;
	  	  }
	  	  if (counter1 > 0 && counter2 <= 0 && step == 2){
	  		  //RED - GREEN -> RED - YELLOW, MAIN 2
	  		  step = 3;
	  		  counter2 = 2;
	  	  }
	  	  if (counter1 <= 0 && counter2 <= 0 && step == 3){
	  		  //RED - YELLOW -> RED - GREEN, MAIN 2 -> 1
	  		  step = 0;
	  		  counter1 = 5;
	  		  counter2 = 3;
	  	  }
	  	  switch(step){
	  	    case 0:
	  	    	display7SEG2(counter1--);
	  	    	display7SEG1(counter2--);
	  	    	HAL_GPIO_WritePin(NS_GREEN_GPIO_Port, NS_GREEN_Pin, GPIO_PIN_RESET);
	  	    	HAL_GPIO_WritePin(EW_RED_GPIO_Port, EW_RED_Pin, GPIO_PIN_RESET);
	  	    	HAL_GPIO_WritePin(NS_YEL_GPIO_Port, NS_YEL_Pin, GPIO_PIN_SET);
	  	    	HAL_GPIO_WritePin(NS_RED_GPIO_Port, NS_RED_Pin, GPIO_PIN_SET);
	  	        HAL_GPIO_WritePin(EW_YEL_GPIO_Port, EW_YEL_Pin, GPIO_PIN_SET);
	  	        HAL_GPIO_WritePin(EW_GREEN_GPIO_Port, EW_GREEN_Pin, GPIO_PIN_SET);
	  	        break;
	  	    case 1:
	  	    	display7SEG2(counter1--);
	  	        display7SEG1(counter2--);
	  	    	HAL_GPIO_WritePin(NS_YEL_GPIO_Port, NS_YEL_Pin, GPIO_PIN_RESET);
	  	        HAL_GPIO_WritePin(EW_RED_GPIO_Port, EW_RED_Pin, GPIO_PIN_RESET);
	  	        HAL_GPIO_WritePin(NS_GREEN_GPIO_Port, NS_GREEN_Pin, GPIO_PIN_SET);
	  	        HAL_GPIO_WritePin(NS_RED_GPIO_Port, NS_RED_Pin, GPIO_PIN_SET);
	  	        HAL_GPIO_WritePin(EW_YEL_GPIO_Port, EW_YEL_Pin, GPIO_PIN_SET);
	  	        HAL_GPIO_WritePin(EW_GREEN_GPIO_Port, EW_GREEN_Pin, GPIO_PIN_SET);
	  	        break;
	          case 2:
	          	display7SEG2(counter1--);
	              display7SEG1(counter2--);
	          	HAL_GPIO_WritePin(NS_RED_GPIO_Port, NS_RED_Pin, GPIO_PIN_RESET);
	  	        HAL_GPIO_WritePin(EW_GREEN_GPIO_Port, EW_GREEN_Pin, GPIO_PIN_RESET);
	  	        HAL_GPIO_WritePin(NS_GREEN_GPIO_Port, NS_GREEN_Pin, GPIO_PIN_SET);
	  	        HAL_GPIO_WritePin(NS_YEL_GPIO_Port, NS_YEL_Pin, GPIO_PIN_SET);
	  	        HAL_GPIO_WritePin(EW_YEL_GPIO_Port, EW_YEL_Pin, GPIO_PIN_SET);
	  	        HAL_GPIO_WritePin(EW_RED_GPIO_Port, EW_RED_Pin, GPIO_PIN_SET);
	  	        break;
	  	    case 3:
	  	    	display7SEG2(counter1--);
	  	    	display7SEG1(counter2--);
	  	    	HAL_GPIO_WritePin(NS_RED_GPIO_Port, NS_RED_Pin, GPIO_PIN_RESET);
	  	        HAL_GPIO_WritePin(EW_YEL_GPIO_Port, EW_YEL_Pin, GPIO_PIN_RESET);
	  	        HAL_GPIO_WritePin(NS_GREEN_GPIO_Port, NS_GREEN_Pin, GPIO_PIN_SET);
	  	        HAL_GPIO_WritePin(NS_YEL_GPIO_Port, NS_YEL_Pin, GPIO_PIN_SET);
	  	        HAL_GPIO_WritePin(EW_GREEN_GPIO_Port, EW_GREEN_Pin, GPIO_PIN_SET);
	  	        HAL_GPIO_WritePin(EW_RED_GPIO_Port, EW_RED_Pin, GPIO_PIN_SET);
	              break;
	  	    }
	  	HAL_Delay(1000);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NS_RED_Pin|NS_YEL_Pin|NS_GREEN_Pin|EW_RED_Pin
                          |EW_YEL_Pin|EW_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PIN1_A_Pin|PIN1_B_Pin|PIN1_C_Pin|PIN2_D_Pin
                          |PIN2_E_Pin|PIN2_F_Pin|PIN2_G_Pin|PIN1_D_Pin
                          |PIN1_E_Pin|PIN1_F_Pin|PIN1_G_Pin|PIN2_A_Pin
                          |PIN2_B_Pin|PIN2_C_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : NS_RED_Pin NS_YEL_Pin NS_GREEN_Pin EW_RED_Pin
                           EW_YEL_Pin EW_GREEN_Pin */
  GPIO_InitStruct.Pin = NS_RED_Pin|NS_YEL_Pin|NS_GREEN_Pin|EW_RED_Pin
                          |EW_YEL_Pin|EW_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PIN1_A_Pin PIN1_B_Pin PIN1_C_Pin PIN2_D_Pin
                           PIN2_E_Pin PIN2_F_Pin PIN2_G_Pin PIN1_D_Pin
                           PIN1_E_Pin PIN1_F_Pin PIN1_G_Pin PIN2_A_Pin
                           PIN2_B_Pin PIN2_C_Pin */
  GPIO_InitStruct.Pin = PIN1_A_Pin|PIN1_B_Pin|PIN1_C_Pin|PIN2_D_Pin
                          |PIN2_E_Pin|PIN2_F_Pin|PIN2_G_Pin|PIN1_D_Pin
                          |PIN1_E_Pin|PIN1_F_Pin|PIN1_G_Pin|PIN2_A_Pin
                          |PIN2_B_Pin|PIN2_C_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
